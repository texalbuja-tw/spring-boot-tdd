# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test
      - run:
          name: Save Test Results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - run:
          name: Jacoco Test Coverage Verification
          command: |
            ./gradlew jacocoTestCoverageVerification
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
          # As the JAR was only assembled in the first build container, build/libs will be empty in all the other build containers.
      - store_artifacts:
          path: build/libs

workflows:
  build_and_push_image:
    jobs:
      - build
      - aws-ecr/build_and_push_image:
          account-url: 158175188896.dkr.ecr.us-east-2.amazonaws.com/docker-repo
          aws-access-key-id: AKIASJU7Z26QN5C2JYEE
          aws-secret-access-key: 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
          context: myContext
          create-repo: true
          dockerfile: DockerFile
          path: .
          profile-name: myProfileName
          region: us-east-2
          repo: docker-repo
          tag: jeje
